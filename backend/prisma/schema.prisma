

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_NEON_URL")
}


model User {
  id          String    @id @default(uuid())
  username    String    @unique
  fullname    String    @default("")
  email       String    @unique
  passwordHash String
  avatarUrl   String?   // URL to profile picture
  bio         String?   // Short user bio
  createdAt   DateTime  @default(now())

  // Relations
  contacts ChatParticipant[]
  messages  Message[]
  messageStatuses MessageStatus[]
}

model Chat {
  id        String    @id @default(uuid())
  name      String?   // null for 1-1 chats
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relations
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id       String    @id @default(uuid())
  chatId   String
  userId   String
  role     String   @default("member") // admin, member
  joinedAt DateTime @default(now())

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  senderId    String?
  content     String?
  messageType String   @default("text") // text, image, file
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  chat   Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User? @relation(fields: [senderId], references: [id], onDelete: SetNull)
  statuses MessageStatus[]
}

model MessageStatus {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  status    String   @default("delivered") // sent, delivered, read
  updatedAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}


model CallSession {
  id          String   @id @default(uuid())
  chatId      String
  initiatorId String
  receiverId  String
  callType    String   // audio, video
  status      String   @default("initiated") // initiated, ringing, in_progress, ended
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  createdAt   DateTime @default(now())
}